DAY1
1//ekranı temizle

cls

2//shop isminde bir DB oluştur

use shop

3// hangi db deyim

db

4//tüm db leri görmek istersek

show dbs

içi boş olan db leri göstermez

5//shop içinde customers collectionı oluşturalım

db.createCollection("customers")

6//Tüm collectionlari listele

db.getCollectionNames()

show collections

7//customers collectionını sil

db.customers.drop()

8// shop database ni sil

db.dropDatabase()

9//yeni bir DB(products) ve içinde bir collection(electronics) oluşturalım

use products
db.createCollection("electronics")

10//collectiona document insert etme

db.electronics.insertOne({"name":"TV","price":230})

Not: collection oluşturmadan,document insertOne kullanarak doğrudan eklenebilir

Not:Çift veya tek tırnak kullanılabilir

11//Birden fazla document ekleme

db.electronics.insertMany([{"name":"ipod","price":110},{"name":"iphone14"},{"name":"radio","price":53,"tax":10}])

Not:birden fazla document dizi[] içinde edklenir.

12//Birden fazla document ekleme
db.electronics.insert({name:"iron",price:75})

db.electronics.insert([{"name":"iron","price":75},{"name":"radio","tax":8}])

insert:deprecate method

13//tüm documentları listele

db.electronics.find()

//json formatında düzgün gözükmesi için mongosh ta farketmeyecek ama diğer editörlerde bu formatta olması için pretty komutu kullanılır
db.electronics.find().pretty()

14// ilk 2 documentı listeleyin

db.electronics.find().limit(2)

15//sadece 3. documentı görelim

db.electronics.find().skip(2).limit(1)

16//5.documentten itibaren ilk 2 documentı göster

db.electronics.find().skip(4).limit(2)

17//name fieldı TV olanları gösterelim

db.electronics.find({"name":"TV"})

***find({filter})

18//name:TV olan ve price 230 olan documentı listeleyin


db.electronics.find({$and:[{"name":"TV"},{"price":230}]})

19//name:TV olan veya price 230 olan documentı listeleyin

20//sadece belirli field ları listelemek istersek
//radio ların sadece priceleri görüntülensin

db.electronics.find({"name":"radio"},{"price":1})

Not:find({filter},{projection})

defaultta id 1 diğerlei 0

21//radio ların sadece price ve id si gözükmesin

db.electronics.find({"name":"radio"},{"price":0,_id":0})

//radio ların sadece price ı gözüksün id gözükmesin

22//tüm documentları görüntüleyin
sadece price ve name bilgileri gelsin

db.electronics.find({},{"price":1,"name":1,"_id":0})

Day 02
23//name i radyo veya TV olan documentları name ve pricleri görüntüle

db.electronics.find({$or:[{"name":"radio"},{"name":"TV"}]},{"name":1,"price":1,"_id":0})


24//yukarıdaki sorguyu price değerine göre sırala

db.electronics.find({$or:[{"name":"radio"},{"name":"TV"}]},{"name":1,"price":1,"_id":0}).sort("price":1)

Not:sort defaultta ASC yada Natural olarak sıralanır
*belirli bir fielda göre azalan sıralamak istersek fielda -1
*belirli bir fielda göre artan sıralamak istersek fielda 1


//yukarıdaki sorguyu price değerinin azalan durumu için yapınız

db.electronics.find({$or:[{"name":"radio"},
	{"name":"TV"}]},
{"name":1,"price":1,"_id":0}).sort({"price":-1})

25//name i TV olanları price değerine göre azalan sıralayın

db.electronics.find({"name":"TV"}).sort({"price":-1})


26// collectiondaki ilk elemanı bulunuz

db.electronics.find().limit(1)

db.electronics.findOne()

27//collection da name i radio olan ilk documenti
görelim

db.electronics.findOne({"name":"radio"})

28//collectionda name i TV veya radio olan
ilk documentı görelim

db.electronics.findOne({$or:[{"name":"TV"},{"name":"radio"}]})


*************
Comparison Operators
Eşitlik     ==>  $eq
Küçüktür    ==>  $lt 
Büyüktür    ==>  $gt
Küçük eşit  ==>  $lte
Büyük eşit  ==>  $gte
Eşit değil  ==>  $ne 
Dizi içinde ==>  $in 
Dizide değil==>  $nin

***************

29// price ı 110 olan documentı görüntüle

db.electronics.find({"price":{$eq:110}})

30//price ı 300 veya daha az olan document ları
gösterin

db.electronics.find({"price":{$lte:300}})

31// yukarıdaki sorguda id gözükmesin

db.electronics.find({"price":{$lte:300}},{"_id":0})

32// price ı 100 den büyük olanların sadece 
name ve price larını görelim

db.electronics.find({"price":{$gt:100}},{"name":1,"price":1,"_id":0})

33// price ı 230,110 veya 123 olanların sadece name ve pricelarını görelim

db.electronics.find({$or:[{"price":230},{"price":110},{"price":123}]},{"name":1,"price":1,"_id":0})

db.electronics.find({"price":{$in:[230,110,123]}},{"name":1,"price":1,"_id":0})

34// price ı 230,110 veya 123 olmayaanların sadece name ve 
pricelarını görelim
db.electronics.find({"price":{$nin:[230,110,123]}},{"name":1,"price":1,"_id":0})

//=================================================================
//            findOneAndUpdate - findOneAndReplace
//=================================================================

// A - findOneAndReplace() 
//----------------------------
//   1-) belirtilen koşullara uyan ilk dökümanı bulur ve degistirir. 
//   2-) Komut icerisinde belirtilen kisimlari guncellerken bos birakilan 
//       alanlari kaldirir. (API'lerdeki PUT metoduna benzetilebilir).
//   3-) Islem sonunda ilgili dokumanin guncellenmemiş halini gosterir.
//       yani ben bunu değiştirdim diye haber veriyor

//       
// B - findOneAndUpdate() 
//----------------------------
///  1-) Belirtilen koşullara uyan ilk dökümanı bulur ve günceller. 
//   2-) Komut icerisinde belirtilen kisimlari guncellerken bos birakilan 
//       alanlari modifiye etmez  (API'lerdeki PATCH metoduna benzetilebilir).
//   3-) komutun kosul kismindan sonra degislikileri gerceklestirmek icin bir 
//       atomic operator kullanilir. 
//       ($set (direk değer verilirse), $inc(arttırma azaltma), $mul (çarpma)vb.)
//   4)  Islem sonunda ilgili dokumanin guncellenMEmiş halini gosterir.

//=================================================================
// ÖNEMLİ : !!!  bu 2 kod çalıştığında dökümanın update olmamış hali ekrana gelir.
// SYNTAX : ( {filter}, {update}, {options})


35// price ı 100 den az olan documentı 
name:"Car"
price:400
olan document ile dğiştiriniz

db.electronics.findOneAndReplace({"price":{$lt:100}},
	{"name":"Car","price":400})

36//price i 100 den büyük olan
documentlardan price ı en düşük olan
documentı
"name":"en ucuz" ile değiştirelim

db.electronics.findOneAndReplace({"price":{$gt:100}},{"name":"en ucuz"},{sort:{"price":1}})

37//price bilgisi 100 den büyük olan
documentlardan en büyüğünü
"name":"en pahalı" olarak güncelleyin

db.electronics.findOneAndUpdate({"price":{$gt:100}},{$set:{"name":"en pahalı"}},{sort:{"price":-1}})

38//price bilgisi 100 den küçük
ilk document ismini "güncellendi"
oşarak güncelleyiniz

db.electronics.findOneAndUpdate({"price":{$lt:100}},{$set:{"name":"güncellendi"}})

39//Fiyatı 200 den küçük olan
documentlar içinde fiyatı en büyük 
olanın ismini "idare eder" olarak güncelleyin 

db.electronics.findOneAndUpdate({"price":{$lt:200}},{$set:{"name":"idare eder"}},{sort:{"price":-1}})

40//price ı 230 olan ilk documentı
bulup price ını 350 olarak güncelle ve
GÜNCELLENMİŞ documentı görelim 

db.electronics.findOneAndUpdate({"price":230},{$set:{"price":350}},{returnNewDocument:true})
defaultta false olarak ayarlanmış

41//price ı 930 olan documentı bulup
name:"GOLD", "price":250 olarak güncelleyelim
eğer yoksa da document olarak eklesin

db.electronics.findOneAndUpdate({"price":230},{$set:{"price":350}},{returnNewDocument:true})

upsert: update + insert

db.electronics.findOneAndUpdate({"price":930},{$set:{"name":"GOLD","price":250}},{upsert:true,returnNewDocument:true})

42//birden fazla document güncellemesi
Fiyatı 300 den düşük olan bütün documentların
ismini Woww yapın

db.electronics.updateMany({"price":{$lt:300}},{$set:{"name":"Woww"}})

43//Fiyatı 300 den düşük olan bütün
documentların price ın 2 ile çarpalım

db.electronics.updateMany(
{"price":{$lt:300}},
{$mul:{"price":2}}
)



**************************************************************************************************************
***************************************MONGO DB-Practice*******************************************************
***************************************************************************************************************

==db ekleme-silme,collection oluşturma,document insert etme,
==document filtreleme==
**************
PRACTICE-1
**************
//-------------------------------------------------------------------------------
//1)a-tüm databaseleri görüntüleyiniz,
//  b-"school" ve "university" isminde bir database oluşturunuz, 
//  c- hangi databasede olduğunuzu görüntüleyiniz.
//-------------------------------------------------------------------------------

show dbs 
use("school"),use("university")
db

//------------------------------------------------------------------------------
//2)a-university databaseinde "students" isimli bir 
//collection oluşturunuz ve
// universitydeki tüm collectionları görüntüleyiniz.
//----------------------------------------------------

db.createCollection("students")
db.getCollectionNames()

//------------------------------------------------------------------------------
//2)b-university databaseindeki students ı siliniz.
//  c-şimdi de university databaseini silin gitsin:)
//------------------------------------------------------------------------------
db.students.drop()
db.dropDatabase()

//------------------------------------------------------------------------------
//3)a-school databaseinde "students" collectionına bir tane document ekleyiniz.
 "name":"Peyami Safa",
 "age":45,
 "city":"İstanbul",
 "grade":535,
 "department":"Math",
 "books":[
      {"name":"Math","category":"lessson"},
      {"name":"Sefiller","category":"novel"}
      ]
//------------------------------------------------------------------------------

db.students.insertOne({ "name":"Peyami Safa",
 "age":45,
 "city":"İstanbul",
 "grade":535,
 "department":"Math",
 "books":[
      {"name":"Math","category":"lessson"},
      {"name":"Sefiller","category":"novel"}
      ]})


//------------------------------------------------------------------------------
//3)b-"students" collectionına bir tane document ekleyiniz.
 "name":"John Steinbeck",
 "age":55,
 "city":"Bursa",
 "grade":535,
 "department":{"name":"IT","language":"tr"},
 "points":[70,90,100 ]
//------------------------------------------------------------------------------

db.students.insertOne({ "name":"John Steinbeck",
 "age":55,
 "city":"Bursa",
 "grade":535,
 "department":{"name":"IT","language":"tr"},
 "points":[70,90,100 ]})

//------------------------------------------------------------------------------
//4)"students" collectionına çoklu document ekleyiniz.
 {"name":"Ahmet Ümit", "age":35, "city":"İstanbul","grade":463, "department":{"name":"IT","language":"tr"}},
 {"name":"R.Nuri Güntekin",  "age":43, "city":"Ankara",  "grade":567, "department":{"name":"Math","language":"eng"}},
 {"name":"S.Faik Abasıyanık","age":55, "city":"Antalya", "grade":409, "department":{"name":"Chemistry","language":"eng"}},
 {"name":"Yaşar Kemal",      "age":23, "city":"İstanbul","grade":390, "department":{"name":"English","language":"eng"}},
 {"name":"Halide E. Adıvar", "age":26, "city":"İzmir",   "grade":523, "department":{"name":"Math","language":"tr"}},
 {"name":"Charles Dickens", "age":35, "city":"İstanbul","grade":463, "department":{"name":"IT","language":"eng"}},
 {"name":"Nazan Bekiroğlu",  "age":49, "city":"Bursa",   "grade":387, "department":{"name":"English","language":"eng"}},
 {"name":"Sabahattin Ali",   "age":53, "city":"İzmir",   "grade":427, "department":{"name":"Physics","language":"tr"}},
 {"name":"Stephen King",   "age":53, "city":"İzmir",   "grade":523, "department":{"name":"Physics","language":"eng"}},
 {"name":"Orhan Pamuk",      "age":56, "city":"Ankara",  "grade":486, "department":{"name":"Psychology","language":"tr"}},
 {"name":"Rıfat Ilgaz" ,     "age":74, "city":"Antalya", "grade":519, "department":{"name":"IT","language":"eng"}},
 {"name":"Lev Tolstoy" ,     "age":26, "city":"Antalya", "grade":520, "department":{"name":"IT","language":"eng"}}
//------------------------------------------------------------------------------

db.students.insertMany([{"name":"Ahmet Ümit", "age":35, "city":"İstanbul","grade":463, "department":{"name":"IT","language":"tr"}},
 {"name":"R.Nuri Güntekin",  "age":43, "city":"Ankara",  "grade":567, "department":{"name":"Math","language":"eng"}},
 {"name":"S.Faik Abasıyanık","age":55, "city":"Antalya", "grade":409, "department":{"name":"Chemistry","language":"eng"}},
 {"name":"Yaşar Kemal",      "age":23, "city":"İstanbul","grade":390, "department":{"name":"English","language":"eng"}},
 {"name":"Halide E. Adıvar", "age":26, "city":"İzmir",   "grade":523, "department":{"name":"Math","language":"tr"}},
 {"name":"Charles Dickens", "age":35, "city":"İstanbul","grade":463, "department":{"name":"IT","language":"eng"}},
 {"name":"Nazan Bekiroğlu",  "age":49, "city":"Bursa",   "grade":387, "department":{"name":"English","language":"eng"}},
 {"name":"Sabahattin Ali",   "age":53, "city":"İzmir",   "grade":427, "department":{"name":"Physics","language":"tr"}},
 {"name":"Stephen King",   "age":53, "city":"İzmir",   "grade":523, "department":{"name":"Physics","language":"eng"}},
 {"name":"Orhan Pamuk",      "age":56, "city":"Ankara",  "grade":486, "department":{"name":"Psychology","language":"tr"}},
 {"name":"Rıfat Ilgaz" ,     "age":74, "city":"Antalya", "grade":519, "department":{"name":"IT","language":"eng"}},
 {"name":"Lev Tolstoy" ,     "age":26, "city":"Antalya", "grade":520, "department":{"name":"IT","language":"eng"}}]);

//------------------------------------------------------------------------------
//5)"students" collectionındaki tüm documenti görüntüleyiniz.
//------------------------------------------------------------------------------

db.students.find()

//------------------------------------------------------------------------------
//6)"students" collectionında 2. kişiyi görüntüleyiniz. 
//------------------------------------------------------------------------------

db.students.find().skip(1).limit(1)

//------------------------------------------------------------------------------
//7)"students" collectionında 3 ve 4. kişilerin sadece 
//isim ve şehirlerini görüntüleyiniz. 
//------------------------------------------------------------------------------

db.students.find({},{name:1,city:1,_id:0}).skip(2).limit(2)

//------------------------------------------------------------------------------
//8)a-"students" collectionında şehri İzmir olan kişiyi/kişileri
// görüntüleyiniz.(name,city)
//------------------------------------------------------------------------------

db.students.find({"city":"İzmir"},{name:1,city:1,_id:0})

//------------------------------------------------------------------------------
//8)b-"students" collectionında "IT" bölümünde(department) okuyan
// kişiyi/kişileri görüntüleyiniz.(name,department,grade)
//------------------------------------------------------------------------------

db.students.find({"department.name":"IT"},{name:1,department:1,grade:1,_id:0})

//------------------------------------------------------------------------------
//8)c-"students" collectionında program dili ingilizce(eng) olan bölümde(department) okuyan
// kişiyi/kişileri görüntüleyiniz.(name,department,grade)//ÖDEVV
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
//9)"students" collectionında program dili Türkçe olan bölümde(department) okuyan
// ve şehri İzmir olan
// kişiyi/kişileri görüntüleyiniz.(name,department,city)
//------------------------------------------------------------------------------

db.students.find({$and:[{"department.language":"tr"},{"city":"İzmir"}]},{"name":1,"department":1,"city":1,"_id":0})

//------------------------------------------------------------------------------
//10)"students" collectionında "İstanbul" da yaşayan veya yaşı 26 
// olan kişiyi/kişileri görüntüleyiniz.(name,city,age)
//------------------------------------------------------------------------------

db.students.find({$or:[{"city":"İstanbul"},{"age":26}]},{"name":1,"age":1,"city":1,"_id":0})


//------------------------------------------------------------------------------
//11)"students" collectionında program dili eng veya department name i IT  
// olan kişiyi/kişileri görüntüleyiniz.Kaç kişi olduğunu bulunuz.(name,department)//ÖDEVV
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//12)"students" collectionında program dili eng ve department name i IT  
// olan kişiyi/kişileri görüntüleyiniz.(name,department)//ÖDEVV
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
//13)"students" collectionını yaşa(age) göre azalan şekilde sıralayınız.
//------------------------------------------------------------------------------

db.students.find().sort({"age":-1})

//------------------------------------------------------------------------------
//14-a)"students" collectionında yaşça en küçük kişinin
//    isim(name) , yaş(age) ve şehrini(city) görüntüleyiniz
//------------------------------------------------------------------------------


db.students.find({},{name:1,age:1,city:1,_id:0}).sort({"age":1}).limit(1)

//alternatif
db.students.findOne({},{name:1,age:1,city:1,_id:0},{sort:{"age":1}})


//------------------------------------------------------------------------------
//14-b)"students" collectionında yaşça en büyük ikinci kişinin
//    isim(name) , yaş(age) ve şehrini(city) görüntüleyiniz//ÖDEVV
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
//15)"students" collectionında department i IT, Math veya Chemistry olan kişileri 
//isme göre artan sıralı görüntüleyiniz.(name,department)
//------------------------------------------------------------------------------

db.students.find({"department.name":{$in:["IT","Math","Chemistry"]}},{name:1,department:1,_id:0}).sort("name":1)

//------------------------------------------------------------------------------
//16)"students" collectionında grade i 550 ye en yakın ve 550den küçük kişinin
// departmentını IT
//olarak güncelleyiniz.
//------------------------------------------------------------------------------

db.students.findOneAndUpdate({"grade":{$lte:550}},{$set:{"department":"IT"}},{sort:{"grade":-1}})
